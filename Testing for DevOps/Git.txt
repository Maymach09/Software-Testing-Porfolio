Git

It's a tool/skill which: 
1. helps to Track the changes
2. helps in Collaboration

GitHub:
    It's a website:
        1. Can be used to showcase your projects
        2. Repositories

    1. Create a repository
    2. Add readme.md
    3. Add details about project in readme.

Git setup:
1. Download Visual Studio
2. For windows download Gitbash

git commands:
    git --version  - to know the git version
    git config --list - to know the configuration of git setup
    git clone <-some link-> - to copy repository on local machine 
    ls/dir - to get all the files in the folder
    ls -a/dir /a:h - to get hidden files
    git status - to get the status of Code
        - untracked - new file that was never staged
        - modified - changed
        - staged - file is yet to be committed
        - unmodified - after committ
    git add <file name> - to add the files to staged state
    git commit -m "message" - adds new or changed files in your working  directory
    git push origin main - to upload local repo content to global repo
    init - to create a new git repo
        - git init
        - git remote add origin <link>
        - git remote -v (to verify remote)
        - git branch (to check branch)
        - git branch -M main (to rename branch)
        - git push origin main (-u to create shortcut to push to main)

Create Branches:
- git branch (to check branch)
- git branch -M main (to rename branch)
- git checkout -b <branch name> (to create and navigate to new branch)
- git checkout <branch name> (to navigate)
- git branch -d <branch name> (to delete branch)

Merging Code:
- First method:
    - git diff main (to find difference between branches)
    - git merge main (to merge into main branch)
- Second method:
    - Create PR

Pull command - to fetch and download content from a local repo and immediately update the local repo to match that content
    - git pull origin main

Resolving Merge Conflicts:

Undoing changes:
    Case 1:
        - staged changes:
            git reset <filename>
            git reset
    Case 2:
        - git reset HEAD~1
    Case 3:
        - git reset <commit hash>
        - git reset --hard <commit hash>

Fork:
    Fork is a new repo thats shares code and visibility settings with the original "upstream" repo.
    Fork is a rough copy.

